name: Teamo deployment

on:
  push:
    branches:
      - main
      - deploy
    paths-ignore:
      - tests/**


# This is not nice and a lot of duplication
# Will fix when actions in actions are supported.
# See https://github.com/actions/runner/issues/646
jobs:
  deploy-main:
    name: Deploy main branch
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: FranzDiebold/github-env-vars-action@v1.2.0
    - name: Setup Python environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: x64
    - name: Build the wheel package
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python setup.py bdist_wheel
    - name: Extract some stuff
      run: |
        echo ::set-output name=version::$(cat VERSION)
        echo ::set-output name=tag::docker.pkg.github.com/${GITHUB_REPOSITORY_OWNER_SLUG}/${GITHUB_REPOSITORY_NAME_SLUG}/teamo:${GITHUB_REF_NAME_SLUG}
      id: extract_stuff
    - name: Extract bot token secret (main)
      if: env.GITHUB_REF_NAME_SLUG == 'main'
      run: |
        if [ "$GITHUB_REF_NAME_SLUG" == "main" ]
        then
          echo "::set-output name=token::${{ secrets.TEAMO_BOT_TOKEN_MAIN }}"
        elif [ "$GITHUB_REF_NAME_SLUG" == "deploy" ]
        then
          echo "::set-output name=token::${{ secrets.TEAMO_BOT_TOKEN_DEPLOY }}"
        else
          echo "::error::Invalid branch: ${{ env.GITHUB_REF_NAME_SLUG }}"
        fi
      id: get_token
    - name: Build and push the Docker image
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com -u ${GITHUB_REPOSITORY_OWNER} --password-stdin
        docker build -t ${{ steps.extract_stuff.outputs.tag }} --build-arg VERSION=${{ steps.extract_stuff.outputs.version }} .
        docker push ${{ steps.extract_stuff.outputs.tag }}
    - name: Pull and start Docker container
      uses: appleboy/ssh-action@master
      with:
        host: '${{ secrets.DEPLOY_HOST }}'
        username: '${{ secrets.DEPLOY_USERNAME }}'
        passphrase: '${{ secrets.DEPLOY_PASSPHRASE }}'
        key: '${{ secrets.DEPLOY_KEY }}'
        port: '${{ secrets.DEPLOY_PORT }}'
        script: |
          set -e
          docker login https://docker.pkg.github.com -u ${{ env.GITHUB_REPOSITORY_OWNER }} -p ${{ secrets.GITHUB_TOKEN }}
          docker pull ${{ steps.extract_stuff.outputs.tag }}
          docker stop teamo-${{ env.GITHUB_REF_NAME }}-instance || true
          docker rm teamo-${{ env.GITHUB_REF_NAME }}-instance || true
          touch teamo/${{ env.GITHUB_REF_NAME }}/db/teamo.db
          docker run -e TEAMO_BOT_TOKEN=${{ steps.get_token.outputs.token }} -d -v $PWD/teamo/${{ env.GITHUB_REF_NAME }}/db/teamo.db:/teamo/db/teamo.db --name teamo-${{ env.GITHUB_REF_NAME }}-instance teamo:${{ env.GITHUB_REF_NAME }}
          sleep 10
          if [ "$( docker container inspect -f '{{.State.Status}}' teamo-${{ env.GITHUB_REF_NAME }}-instance )" == "running" ]; then exit 0; else echo "Docker container is not running. Did it crash during startup?" && exit 1; fi

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: ./.github/actions/deploy-action
#         if: github.ref == 'refs/heads/main'
#         with:
#           bot-token: ${{ secrets.TEAMO_BOT_TOKEN_MAIN }}
#           host: ${{ secrets.DEPLOY_HOST }}
#           port: ${{ secrets.DEPLOY_PORT }}
#           username: ${{ secrets.DEPLOY_USERNAME }}
#           key: ${{ secrets.DEPLOY_KEY }}
#           passphrase: ${{ secrets.DEPLOY_PASSPHRASE }}
#           branch: main
#       - uses: ./.github/actions/deploy-action
#         if: github.ref == 'refs/heads/deploy'
#         with:
#           bot-token: ${{ secrets.TEAMO_BOT_TOKEN_DEPLOY }}
#           host: ${{ secrets.DEPLOY_HOST }}
#           port: ${{ secrets.DEPLOY_PORT }}
#           username: ${{ secrets.DEPLOY_USERNAME }}
#           key: ${{ secrets.DEPLOY_KEY }}
#           passphrase: ${{ secrets.DEPLOY_PASSPHRASE }}
#           branch: deploy
